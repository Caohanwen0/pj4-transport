#!/usr/bin/env -S python3 -u

import argparse, socket, time, json, select, struct, sys, math, datetime

# Hyper parameters
#########################################

DATA_SIZE = 1375
ADVERATISED_WINDOW = 2
INITIAL_RTT = 0.1

# Field names
#########################################

# Message Fields
SEQN = "sequence"
DATA = "data"
ACK = "ack"
SYN = "syn"
EOF = "eof"

# Packet Fields
MSG = "mesage"
TIME = "time"
RT = "retransmission"

#########################################

class Sender:
    def __init__(self, host, port):
        self.host = host
        self.remote_port = int(port)
        self.log("Sender starting up using port %s" % self.remote_port)
        self.socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        self.socket.bind(('0.0.0.0', 0))
        self.waiting = False

        self.sequence_num = 0
        self.transmit_complete = False
        self.sent_packet = dict() # keep track of the sent packet

    def log(self, message): # print to stderr for debug
        sys.stderr.write(datetime.datetime.now().strftime("%H:%M:%S.%f") + " " + message + "\n")
        sys.stderr.flush()

    def send(self, message):
        # self.socket.sendto(json.dumps(message).encode('utf-8'), (self.host, self.remote_port))
        if self.transmit_complete:
            return
        msg = {
            SEQN : self.sequence_num,
            DATA : "",
            ACK : False,
            EOF : False, 
        }
        overhead = len(json.dumps(msg))
        msg[DATA] = sys.stdin.read(DATA_SIZE - overhead) # readin data from stdin
        if len(msg[DATA]) <= 0:
            msg = {
                SEQN : self.sequence_num,
                DATA : "",
                ACK : False,
                EOF : True,
            }
            self.transmit_complete = True
        # send packet
        try:
            assert self.socket.sendto(json.dumps(message).encode('utf-8'), (self.host, self.remote_port)) < len(msg)
            self.sent_packet[self.sequence_num] = {
                MSG : msg,
                TIME : time.time(),
                RT : 0,
            }
            self.sequence_num += len(msg[DATA])
        except:
            self.log(f"send {self.sequence_num} data fail.")


    def run(self):
        while len(self.sent_packet) < ADVERATISED_WINDOW and (not self.transmit_complete):
            self.send()
        
        while True:
            sockets = [self.socket, sys.stdin] if not self.waiting else [self.socket]

            socks = select.select(sockets, [], [], 0.1)[0]
            for conn in socks:
                if conn == self.socket:
                    k, addr = conn.recvfrom(65535)
                    msg = k.decode('utf-8')

                    self.log("Received message '%s'" % msg)
                    self.waiting = False
                elif conn == sys.stdin:
                    data = sys.stdin.read(DATA_SIZE)
                    if len(data) == 0:
                        self.log("All done!")
                        sys.exit(0)

                    msg = { "type": "msg", "data": data }
                    self.log("Sending message '%s'" % msg)
                    self.send(msg)
                    self.waiting = True

        return

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='send data')
    parser.add_argument('host', type=str, help="Remote host to connect to")
    parser.add_argument('port', type=int, help="UDP port number to connect to")
    args = parser.parse_args()
    sender = Sender(args.host, args.port)
    sender.run()
