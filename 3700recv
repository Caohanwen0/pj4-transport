#!/usr/bin/env -S python3 -u

import argparse, socket, time, json, select, struct, sys, math, datetime

ENCODING = "utf-8"

################################

#Message Field
SEQN = "sequence num"
DATA = "data"
MSG = "msg"

################################

def log(message):
    sys.stderr.write(str(message) + '\n')
    sys.stderr.flush()

# Handles receiving/outputting data messages and sending ACKs to the sender
class Receiver:
    def __init__(self):
        self.socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)  
        self.socket.bind(('0.0.0.0', 0))
        self.port = self.socket.getsockname()[1]  
        log("Bound to port %d" % self.port)

        self.remote_host = None  
        self.remote_port = None 

        self.packets = [] 
        self.output_num = -1 

    def send(self, message:dict):
        self.socket.sendto(json.dumps(message).encode(ENCODING), (self.remote_host, self.remote_port))
    
    def run(self):
        while True:
            connections = select.select([self.socket], [], [])[0]
            for conn in connections:
                data, addr = conn.recvfrom(65535)

                # Grab the remote host/port if we don't already have it
                if self.remote_host is None:
                    self.remote_host = addr[0]
                    self.remote_port = addr[1]

                # handle the message
                self.recv_msg(data)

    def recv_msg(self, data):
        msg = self.parse_msg(data)
        if msg is None:
            # message was corrupted
            log('Received corrupted message')
        else:
            # message was not corrupted
            log(f"Received data message with sequence number {msg[SEQN]}")
            self.send_ack(msg[SEQN])

            if not self.was_received(msg[SEQN]):
                # this is a new packet
                self.cache_packet(msg[DATA], msg[SEQN])
                self.print_output()

    
    '''return MSG field when data is valid.
    Otherwise, return None
    '''
    @classmethod
    def parse_msg(cls, data):
        # parse json
        try:
            decoded = json.loads(data.decode(ENCODING))
        except json.decoder.JSONDecodeError:
            return None

        if MSG not in decoded: # check dict field
            return None

        fields = [SEQN, DATA,] # check dict fields
        for f in fields:
            if f not in decoded[MSG]:
                return None
        return decoded[MSG]
        

    '''send ACK back to sender for receiving packet.'''
    def send_ack(self, seq_num):
        msg = {MSG: {SEQN: seq_num} }
        log(f'Sending ACK with sequence number {seq_num}.')
        self.send(msg)

    '''whether the packet was received'''
    def was_received(self, seq_num):
        return seq_num < len(self.packets) and self.packets[seq_num] is not None

    '''print received data to STDOUT.'''
    def print_output(self):
        for i in range(self.output_num + 1, len(self.packets)):
            # for every packet that haven't been printed out
            packet = self.packets[i]
            if self.was_received(i):
                self.output_num = i
                print(packet, end='', flush=True)
            else: # if encounter a dropped packet
                return

    '''store the new arrived packet in the self.packets list.'''
    def cache_packet(self, packet, seq_num):
        if seq_num >= len(self.packets):
            self.packets += [None for _ in range(seq_num - len(self.packets))]
            self.packets.append(packet)
        else:
            self.packets[seq_num] = packet

# runs the receiver program
if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='receive data')
    args = parser.parse_args()
    sender = Receiver()
    sender.run()